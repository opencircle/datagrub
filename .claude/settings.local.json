{
  "permissions": {
    "allow": [
      "Bash(mkdir:*)",
      "Bash(chmod:*)",
      "Bash(./create-mfes.sh:*)",
      "Bash(tree:*)",
      "Bash(find:*)",
      "Bash(done)",
      "Bash(for dir in shell mfe-projects mfe-evaluations mfe-playground mfe-traces mfe-policy mfe-models)",
      "Bash(do echo \"=== $dir ===\")",
      "Bash(lsof:*)",
      "Bash(curl:*)",
      "Bash(docker-compose restart:*)",
      "Bash(docker-compose exec:*)",
      "Bash(DATABASE_URL=\"postgresql+asyncpg://promptforge:promptforge@localhost:5432/promptforge\" python seed_data.py)",
      "Bash(docker-compose:*)",
      "Bash(docker-compose up:*)",
      "Bash(python:*)",
      "Bash(awk:*)",
      "Bash(xargs:*)",
      "Bash(for:*)",
      "Bash(/tmp/verify_commands.sh:*)",
      "Bash(/dev/null)",
      "Bash(alembic revision:*)",
      "Bash(python3:*)",
      "Bash(TOKEN=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3NTk2OTc5OTksInN1YiI6ImVhNGFiMTg2LWMzMWUtNDA1OS05OTZlLTI5ZWE5OWVhNmM0NyIsInR5cGUiOiJhY2Nlc3MifQ.t_gJA9zyUAplq1Th6o1DC5goCDAt8sitt6EGPCOanno\")",
      "WebFetch(domain:docs.confident-ai.com)",
      "WebFetch(domain:docs.ragas.io)",
      "WebFetch(domain:mlflow.org)",
      "WebFetch(domain:deepeval.com)",
      "Bash(cat:*)",
      "WebFetch(domain:docs.deepchecks.com)",
      "WebFetch(domain:docs.arize.com)",
      "WebFetch(domain:arize.com)",
      "WebSearch",
      "WebFetch(domain:llmdocs.deepchecks.com)",
      "Bash(alembic upgrade:*)",
      "Bash(docker exec:*)",
      "Bash(/Users/rohitiyer/datagrub/promptforge/api-tier/scripts/test_oiiro_provider_config.sh)",
      "Bash(docker logs:*)",
      "Bash(/Users/rohitiyer/datagrub/promptforge/api-tier/scripts/test_provider_endpoints_simple.sh)",
      "Bash(if [ -d \"/Users/rohitiyer/datagrub/promptforge/node_modules\" ])",
      "Bash(then mv /Users/rohitiyer/datagrub/promptforge/node_modules /Users/rohitiyer/datagrub/promptforge/ui-tier/node_modules)",
      "Bash(else echo \"No node_modules to move\")",
      "Bash(fi)",
      "Read(//Users/shared/**)",
      "Bash(test:*)",
      "Bash(readlink:*)",
      "Bash(npm install:*)",
      "Bash(./start-all-mfes.sh:*)",
      "Bash(tail:*)",
      "Bash(do echo \"=== $log%.log ===\")",
      "Bash(while read log)",
      "Bash(do echo \"=== $log ===\")",
      "Bash(do config_file=\"$dir/webpack.config.js\")",
      "Bash(echo \"=== $config_file ===\")",
      "Bash(npm run build:*)",
      "Read(//private/tmp/**)",
      "Bash(pkill:*)",
      "Bash(do echo:*)",
      "Bash(npx playwright install:*)",
      "Bash(npx tsc:*)",
      "Read(//tmp/**)",
      "Bash(kill:*)",
      "Bash(do if grep -q \"''''@tanstack/react-query'''': {\" \"$file\")",
      "Bash(then if ! grep -A 1 \"''''@tanstack/react-query'''': {\" \"$file\")",
      "Bash(then echo \"Needs update: $file\" fi fi done)",
      "Bash(then echo \"âœ“ bootstrap.tsx exists\" grep -E \"(QueryClientProvider|export)\" \"/Users/rohitiyer/datagrub/promptforge/ui-tier/$mfe/src/bootstrap.tsx\")",
      "Bash(ls:*)",
      "Bash(docker ps:*)",
      "Bash(source:*)",
      "Bash(pip install:*)",
      "Bash(pip show:*)",
      "Read(//Users/rohitiyer/Desktop/**)",
      "Bash(npm run:*)",
      "Bash(ps:*)",
      "Bash(npm start)",
      "Bash(pytest:*)",
      "Bash(docker restart:*)",
      "Bash(DATABASE_URL=\"postgresql+asyncpg://promptforge:promptforge@localhost:5432/promptforge\" python3 -m pytest tests/mfe_playground/test_playground_api.py::TestPlaygroundExecute::test_execute_prompt_creates_trace -v)",
      "Bash(docker network:*)",
      "Bash(docker inspect:*)",
      "Bash(/Users/rohitiyer/datagrub/promptforge/api-tier/scripts/run_tests.sh tests/mfe_playground/test_playground_api.py::TestPlaygroundExecute::test_execute_prompt_creates_trace)",
      "Bash(/Users/rohitiyer/datagrub/promptforge/api-tier/scripts/run_tests.sh:*)",
      "Bash(bash:*)",
      "Bash(DATABASE_URL=\"postgresql+asyncpg://promptforge:promptforge@localhost:5432/promptforge\" python3 -m pytest tests/mfe_playground/test_playground_api.py::TestPlaygroundExecute::test_execute_prompt_with_real_evaluation -v)",
      "Bash(/Users/rohitiyer/datagrub/promptforge/api-tier/scripts/test_catalog.sh:*)",
      "Bash(alembic current:*)",
      "Bash(./venv/bin/python -m alembic:*)",
      "Bash(./venv/bin/alembic current)",
      "Bash(./api-tier/scripts/run_tests.sh:*)",
      "Read(//Users/rohitiyer/**)",
      "Bash(docker cp:*)",
      "Bash(./venv/bin/alembic upgrade head)",
      "Bash(.venv/bin/alembic upgrade head)",
      "Bash(venv/bin/alembic upgrade head)",
      "Bash(./venv/bin/python -m alembic.config upgrade head)",
      "Bash(./venv/bin/pip list)",
      "Bash(TOKEN=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3NTk5NzM5MjgsInN1YiI6ImVhNGFiMTg2LWMzMWUtNDA1OS05OTZlLTI5ZWE5OWVhNmM0NyIsInR5cGUiOiJhY2Nlc3MiLCJvcmdhbml6YXRpb25faWQiOiIxYjFjMzBlOC1lYzYzLTRkMDktYmNiOC01ZDI4Nzc3M2ViYTUiLCJyb2xlIjoiYWRtaW4iLCJlbWFpbCI6ImFkbWluQHByb21wdGZvcmdlLmNvbSJ9.8-W1Q-4u21tS3QzUambVUB_oJ6isw0rA3F2_fuhjOU0\")",
      "Bash(/tmp/test_eval_list.sh:*)",
      "Bash(./venv/bin/alembic history --verbose)",
      "Bash(./venv/bin/alembic history)",
      "Bash(TOKEN=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3NjAwMjIwNTIsInN1YiI6ImVhNGFiMTg2LWMzMWUtNDA1OS05OTZlLTI5ZWE5OWVhNmM0NyIsInR5cGUiOiJhY2Nlc3MiLCJvcmdhbml6YXRpb25faWQiOiIxYjFjMzBlOC1lYzYzLTRkMDktYmNiOC01ZDI4Nzc3M2ViYTUiLCJyb2xlIjoiYWRtaW4iLCJlbWFpbCI6ImFkbWluQHByb21wdGZvcmdlLmNvbSJ9.44ORKQXaMLGh8ZpbDKuh04ue2J2rhVFUZ1BswDf0vEc\")",
      "Bash(/tmp/test_api.sh:*)",
      "Bash(/tmp/test_traces.sh:*)",
      "Bash(/tmp/test_token_refresh.sh:*)",
      "Bash(TOKEN=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3NjAwMjI2NTcsInN1YiI6ImVhNGFiMTg2LWMzMWUtNDA1OS05OTZlLTI5ZWE5OWVhNmM0NyIsInR5cGUiOiJhY2Nlc3MiLCJvcmdhbml6YXRpb25faWQiOiIxYjFjMzBlOC1lYzYzLTRkMDktYmNiOC01ZDI4Nzc3M2ViYTUiLCJyb2xlIjoiYWRtaW4iLCJlbWFpbCI6ImFkbWluQHByb21wdGZvcmdlLmNvbSJ9.cvuGk6XO90RaHd1cujEPLup8xHn7GcgDMla44TRGR4w\")",
      "Bash(/tmp/check_trace.sh:*)",
      "Bash(/tmp/test_trace_duration.sh:*)",
      "Bash(./scripts/run_tests.sh:*)",
      "Bash(/Users/rohitiyer/datagrub/promptforge/scripts/verify_model_providers.sh:*)",
      "Bash(/Users/rohitiyer/datagrub/promptforge/scripts/manage_encryption_keys.sh list:*)",
      "Bash(TOKEN=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3NjAwNDYyMDUsInN1YiI6ImVhNGFiMTg2LWMzMWUtNDA1OS05OTZlLTI5ZWE5OWVhNmM0NyIsInR5cGUiOiJhY2Nlc3MiLCJvcmdhbml6YXRpb25faWQiOiIxYjFjMzBlOC1lYzYzLTRkMDktYmNiOC01ZDI4Nzc3M2ViYTUiLCJyb2xlIjoiYWRtaW4iLCJlbWFpbCI6ImFkbWluQHByb21wdGZvcmdlLmNvbSJ9.NU2cIbY5WnxEknxWM40LnVabZ8sjOTbq0VTqtpx-Lwc\")",
      "Bash(/tmp/test_models_api.sh:*)",
      "Bash(/tmp/test_analytics.sh:*)",
      "Bash(npx playwright test:*)",
      "Bash(node -e \"\nconst key = ''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'';\nconst pattern = ''^sk-ant-(api03-)?[A-Za-z0-9-_]{95,101}$'';\nconst regex = new RegExp(pattern);\nconsole.log(''Key:'', key);\nconsole.log(''Length:'', key.length);\nconsole.log(''Pattern:'', pattern);\nconsole.log(''Match result:'', regex.test(key));\n\n// Test character by character\nconsole.log(''\\nPrefix check:'');\nconsole.log(''Starts with sk-ant-api03-:'', key.startsWith(''sk-ant-api03-''));\nconsole.log(''After prefix:'', key.substring(13));\nconsole.log(''After prefix length:'', key.substring(13).length);\nconsole.log(''\\nCharacter validation:'');\nconst afterPrefix = key.substring(13);\nconst charRegex = /^[A-Za-z0-9-_]+$/;\nconsole.log(''All chars valid:'', charRegex.test(afterPrefix));\nconsole.log(''Has invalid chars:'', /[^A-Za-z0-9-_]/.test(afterPrefix));\n\")",
      "Bash(TOKEN=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3NjAwNDYyMDUsInN1YiI6ImVhNGFiMTg2LWMzMWUtNDA1OS05OTZlLTI5ZWE5OWVhNmM0NyIsInR5cGUiOiJhY2Nlc3MiLCJvcmdhbml6YXRpb25faWQiOiIxYjFjMzBlOC1lYzYzLTRkMDktYmNiOC01ZDI4Nzc3M2ViYTUiLCJyb2xlIjoiYWRtaW4iLCJlbWFpbCI6ImFkbWluQHByb21wdGZvcmdlLmNvbSJ9.NU2cIbY5WnxEknxWM40LnVabZ8sjOTbq0VTqtpx-Lwc\" curl -s \"http://localhost:8000/api/v1/models/providers/catalog\" -H \"Authorization: Bearer $TOKEN\")",
      "Bash(DATABASE_URL=\"postgresql+asyncpg://promptforge:promptforge@localhost:5432/promptforge\" python3 model_provider_metadata.py)",
      "Bash(cd:*)",
      "Bash(export DATABASE_URL=\"postgresql+asyncpg://promptforge:promptforge@localhost:5432/promptforge\")",
      "Bash(./venv/bin/python ../database-tier/seed_data/model_provider_metadata.py)",
      "Bash(TOKEN=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3NjAwNDYyMDUsInN1YiI6ImVhNGFiMTg2LWMzMWUtNDA1OS05OTZlLTI5ZWE5OWVhNmM0NyIsInR5cGUiOiJhY2Nlc3MiLCJvcmdhbml6YXRpb25faWQiOiIxYjFjMzBlOC1lYzYzLTRkMDktYmNiOC01ZDI4Nzc3M2ViYTUiLCJyb2xlIjoiYWRtaW4iLCJlbWFpbCI6ImFkbWluQHByb21wdGZvcmdlLmNvbSJ9.NU2cIbY5WnxEknxWM40LnVabZ8sjOTbq0VTqtpx-Lwc\" curl -s \"http://localhost:8000/api/v1/models/catalog\" -H \"Authorization: Bearer $TOKEN\")",
      "WebFetch(domain:platform.openai.com)",
      "Bash(DATABASE_URL=\"postgresql+asyncpg://promptforge:promptforge@localhost:5432/promptforge\" python3 seed_data/model_provider_metadata.py)",
      "Bash(TOKEN=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3NjAwNjc5NTcsInN1YiI6ImVhNGFiMTg2LWMzMWUtNDA1OS05OTZlLTI5ZWE5OWVhNmM0NyIsInR5cGUiOiJhY2Nlc3MiLCJvcmdhbml6YXRpb25faWQiOiIxYjFjMzBlOC1lYzYzLTRkMDktYmNiOC01ZDI4Nzc3M2ViYTUiLCJyb2xlIjoiYWRtaW4iLCJlbWFpbCI6ImFkbWluQHByb21wdGZvcmdlLmNvbSJ9.OzrLOPPEI6B2eZ1S9J86Hx2L-cacHwgSRvqYRHfmDn8\")",
      "Bash(TOKEN=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3NjAwNjg2MTYsInN1YiI6ImVhNGFiMTg2LWMzMWUtNDA1OS05OTZlLTI5ZWE5OWVhNmM0NyIsInR5cGUiOiJhY2Nlc3MiLCJvcmdhbml6YXRpb25faWQiOiIxYjFjMzBlOC1lYzYzLTRkMDktYmNiOC01ZDI4Nzc3M2ViYTUiLCJyb2xlIjoiYWRtaW4iLCJlbWFpbCI6ImFkbWluQHByb21wdGZvcmdlLmNvbSJ9.GtN40JPUEF1L8RH9lc6rNEyI3kV0oAOUNw7bS-8vHP4\")",
      "Bash(TOKEN=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3NjAwNzA4NjksInN1YiI6ImVhNGFiMTg2LWMzMWUtNDA1OS05OTZlLTI5ZWE5OWVhNmM0NyIsInR5cGUiOiJhY2Nlc3MiLCJvcmdhbml6YXRpb25faWQiOiIxYjFjMzBlOC1lYzYzLTRkMDktYmNiOC01ZDI4Nzc3M2ViYTUiLCJyb2xlIjoiYWRtaW4iLCJlbWFpbCI6ImFkbWluQHByb21wdGZvcmdlLmNvbSJ9._mH32QtuA_39m0jec2iA9RX4u2FqNcoyRSt2UZjHyFU\")",
      "Bash(TOKEN=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3NjAwNzE3MzYsInN1YiI6ImVhNGFiMTg2LWMzMWUtNDA1OS05OTZlLTI5ZWE5OWVhNmM0NyIsInR5cGUiOiJhY2Nlc3MiLCJvcmdhbml6YXRpb25faWQiOiIxYjFjMzBlOC1lYzYzLTRkMDktYmNiOC01ZDI4Nzc3M2ViYTUiLCJyb2xlIjoiYWRtaW4iLCJlbWFpbCI6ImFkbWluQHByb21wdGZvcmdlLmNvbSJ9.uTAiXWzBV0YJhKMnqs2eA2le0lwF3p77UPCD_36NHF4\")",
      "Bash(git add:*)"
    ],
    "deny": [],
    "ask": []
  }
}
